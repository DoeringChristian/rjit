---
source: src/backend/optix/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched CUDA Kernel 7939744755488996425 with 10 elements
===============================================
Kernel 7939744755488996425:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[24]) {

	.reg.b8   %b <10>; .reg.b16 %w<10>; .reg.b32 %r<10>;
	.reg.b64  %rd<10>; .reg.f32 %f<10>; .reg.f64 %d<10>;
	.reg.pred %p <10>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 4, data: Literal(0), sbt_hash: 0 } =>
	mov.b32 %f4, 0x0;


	// [1]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 5, data: Literal(0), sbt_hash: 0 } =>
	mov.b32 %f5, 0x0;


	// [2]: ScheduleVar { op: Add, deps: [SVarId(0), SVarId(1)], ty: F32, reg: 6, data: Buffer(0), sbt_hash: 0 } =>
	add.f32 %f6, %f4, %f5;

	// [3]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 7, data: None, sbt_hash: 0 } =>
	mov.u32 %r7, %r0;


	// [4]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 8, data: Literal(1), sbt_hash: 0 } =>
	mov.pred %p8, 0x1;


	// [5]: ScheduleVar { op: Scatter { op: None }, deps: [SVarId(2), SVarId(2), SVarId(3), SVarId(4)], ty: F32, reg: 9, data: None, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	st.global.f32 [%rd3], %f6;

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}

