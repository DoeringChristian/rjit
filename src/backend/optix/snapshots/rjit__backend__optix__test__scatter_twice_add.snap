---
source: src/backend/optix/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched CUDA Kernel 8148088369758450181 with 3 elements
Launched CUDA Kernel 4337508767370232406 with 2 elements
Launched CUDA Kernel 10668679651857953864 with 4 elements
===============================================
Kernel 4337508767370232406:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[24]) {

	.reg.b8   %b <10>; .reg.b16 %w<10>; .reg.b32 %r<10>;
	.reg.b64  %rd<10>; .reg.f32 %f<10>; .reg.f64 %d<10>;
	.reg.pred %p <10>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 4, data: Literal(3), sbt_hash: 0 } =>
	mov.b32 %r4, 0x3;


	// [1]: ScheduleVar { op: Data, deps: [], ty: U32, reg: 6, data: Buffer(0), sbt_hash: 0 } =>

	// [2]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 7, data: None, sbt_hash: 0 } =>
	mov.u32 %r7, %r0;


	// [3]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 8, data: Literal(1), sbt_hash: 0 } =>
	mov.pred %p8, 0x1;


	// [4]: ScheduleVar { op: Scatter { op: None }, deps: [SVarId(0), SVarId(1), SVarId(2), SVarId(3)], ty: Void, reg: 9, data: None, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	st.global.u32 [%rd3], %r4;

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}
===============================================
Kernel 8148088369758450181:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[24]) {

	.reg.b8   %b <12>; .reg.b16 %w<12>; .reg.b32 %r<12>;
	.reg.b64  %rd<12>; .reg.f32 %f<12>; .reg.f64 %d<12>;
	.reg.pred %p <12>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 4, data: Literal(2), sbt_hash: 0 } =>
	mov.b32 %r4, 0x2;


	// [1]: ScheduleVar { op: Data, deps: [], ty: U32, reg: 6, data: Buffer(0), sbt_hash: 0 } =>

	// [2]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 7, data: None, sbt_hash: 0 } =>
	mov.u32 %r7, %r0;


	// [3]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 8, data: Literal(1), sbt_hash: 0 } =>
	mov.b32 %r8, 0x1;


	// [4]: ScheduleVar { op: Add, deps: [SVarId(2), SVarId(3)], ty: U32, reg: 9, data: None, sbt_hash: 0 } =>
	add.u32 %r9, %r7, %r8;

	// [5]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 10, data: Literal(1), sbt_hash: 0 } =>
	mov.pred %p10, 0x1;


	// [6]: ScheduleVar { op: Scatter { op: None }, deps: [SVarId(0), SVarId(1), SVarId(4), SVarId(5)], ty: Void, reg: 11, data: None, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r9, 4, %rd0;
	st.global.u32 [%rd3], %r4;

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}
===============================================
Kernel 10668679651857953864:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[40]) {

	.reg.b8   %b <14>; .reg.b16 %w<14>; .reg.b32 %r<14>;
	.reg.b64  %rd<14>; .reg.f32 %f<14>; .reg.f64 %d<14>;
	.reg.pred %p <14>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Data, deps: [], ty: U32, reg: 5, data: Buffer(0), sbt_hash: 0 } =>

	// [1]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 6, data: None, sbt_hash: 0 } =>
	mov.u32 %r6, %r0;


	// [2]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 7, data: Literal(1), sbt_hash: 0 } =>
	mov.pred %p7, 0x1;


	// [3]: ScheduleVar { op: Gather, deps: [SVarId(0), SVarId(1), SVarId(2)], ty: U32, reg: 8, data: Buffer(1), sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r6, 4, %rd0;
	ld.global.nc.u32 %r8, [%rd3];

	// [4]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 9, data: Literal(1), sbt_hash: 0 } =>
	mov.b32 %r9, 0x1;


	// [5]: ScheduleVar { op: Add, deps: [SVarId(3), SVarId(4)], ty: U32, reg: 10, data: Buffer(2), sbt_hash: 0 } =>
	add.u32 %r10, %r8, %r9;

	// [6]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 11, data: None, sbt_hash: 0 } =>
	mov.u32 %r11, %r0;


	// [7]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 12, data: Literal(1), sbt_hash: 0 } =>
	mov.pred %p12, 0x1;


	// [8]: ScheduleVar { op: Scatter { op: None }, deps: [SVarId(5), SVarId(5), SVarId(6), SVarId(7)], ty: U32, reg: 13, data: None, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+24];
	mad.wide.u32 %rd3, %r11, 4, %rd0;
	st.global.u32 [%rd3], %r10;

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}

