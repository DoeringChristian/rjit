---
source: src/backend/optix/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched CUDA Kernel 1531900833877006545 with 1 elements
===============================================
Kernel 1531900833877006545:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[48]) {

	.reg.b8   %b <9>; .reg.b16 %w<9>; .reg.b32 %r<9>;
	.reg.b64  %rd<9>; .reg.f32 %f<9>; .reg.f64 %d<9>;
	.reg.pred %p <9>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Data, deps: [], ty: Void, reg: 6, param_ty: None, data: Texture(0), size: 400, sbt_hash: 0 } =>

	// [1]: ScheduleVar { op: Data, deps: [], ty: F32, reg: 7, param_ty: Input, data: Buffer(0), size: 1, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+8];
	ld.global.cs.f32 %f7, [%rd0];

	// [2]: ScheduleVar { op: Data, deps: [], ty: F32, reg: 8, param_ty: Input, data: Buffer(1), size: 1, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+16];
	ld.global.cs.f32 %f8, [%rd0];

	// [3]: ScheduleVar { op: TexLookup { dim: 2 }, deps: [SVarId(0), SVarId(1), SVarId(2)], ty: F32, reg: 5, param_ty: None, data: None, size: 1, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+32];
	.reg.f32 %f5_out_<4>;
	tex.2d.v4.f32.f32 {%f5_out_0, %f5_out_1, %f5_out_2,
                             %f5_out_3}, [%rd0, {%f7, %f8}];

	// [4]: ScheduleVar { op: Extract { offset: 0 }, deps: [SVarId(3)], ty: F32, reg: 4, param_ty: Output, data: Buffer(2), size: 1, sbt_hash: 0 } =>
	mov.b32 %f4, %f5_out_0;

	// Store:
	ld.param.u64 %rd0, [params + 24]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.f32 [%rd0], %f4; // (Index * ty.size() + params[offset])[Index] <- var

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}

