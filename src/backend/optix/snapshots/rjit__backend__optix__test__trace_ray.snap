---
source: src/backend/optix/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched OptiX Kernel 14108214741653569021 with 2 elements
===============================================
Kernel 14108214741653569021:

.version 8.0
.target sm_86
.address_size 64

.const .align 8 .b8 params[80];
.entry __raygen__cujit(){

	.reg.b8   %b <43>; .reg.b16 %w<43>; .reg.b32 %r<43>;
	.reg.b64  %rd<43>; .reg.f32 %f<43>; .reg.f64 %d<43>;
	.reg.pred %p <43>;

	call (%r0), _optix_get_launch_index_x, ();
	ld.const.u32 %r1, [params + 4];
	add.u32 %r0, %r0, %r1;

body:

	// [0]: ScheduleVar { op: Data, deps: [], ty: Void, reg: 5, param_ty: None, data: Accel(0), size: 0, sbt_hash: 6797626042257772553 } =>

	// [1]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 6, param_ty: None, data: Literal(1), size: 1, sbt_hash: 0 } =>
	mov.pred %p6, 0x1;


	// [2]: ScheduleVar { op: Data, deps: [], ty: F32, reg: 8, param_ty: None, data: Buffer(0), size: 2, sbt_hash: 0 } =>

	// [3]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 9, param_ty: None, data: None, size: 1, sbt_hash: 0 } =>
	mov.u32 %r9, %r0;


	// [4]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 10, param_ty: None, data: Literal(1), size: 1, sbt_hash: 0 } =>
	mov.pred %p10, 0x1;


	// [5]: ScheduleVar { op: Gather, deps: [SVarId(2), SVarId(3), SVarId(4)], ty: F32, reg: 11, param_ty: None, data: Buffer(1), size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r9, 4, %rd0;
	ld.global.nc.f32 %f11, [%rd3];

	// [6]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 12, param_ty: None, data: Literal(1058642330), size: 1, sbt_hash: 0 } =>
	mov.b32 %f12, 0x3f19999a;


	// [7]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 13, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %f13, 0x0;


	// [8]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 14, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %f14, 0x0;


	// [9]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 15, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %f15, 0x0;


	// [10]: ScheduleVar { op: Data, deps: [], ty: F32, reg: 17, param_ty: None, data: Buffer(2), size: 2, sbt_hash: 0 } =>

	// [11]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 18, param_ty: None, data: None, size: 1, sbt_hash: 0 } =>
	mov.u32 %r18, %r0;


	// [12]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 19, param_ty: None, data: Literal(1), size: 1, sbt_hash: 0 } =>
	mov.pred %p19, 0x1;


	// [13]: ScheduleVar { op: Gather, deps: [SVarId(10), SVarId(11), SVarId(12)], ty: F32, reg: 20, param_ty: None, data: Buffer(3), size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+24];
	mad.wide.u32 %rd3, %r18, 4, %rd0;
	ld.global.nc.f32 %f20, [%rd3];

	// [14]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 21, param_ty: None, data: Literal(981668463), size: 1, sbt_hash: 0 } =>
	mov.b32 %f21, 0x3a83126f;


	// [15]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 22, param_ty: None, data: Literal(1148846080), size: 1, sbt_hash: 0 } =>
	mov.b32 %f22, 0x447a0000;


	// [16]: ScheduleVar { op: Literal, deps: [], ty: F32, reg: 23, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %f23, 0x0;


	// [17]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 24, param_ty: None, data: Literal(255), size: 1, sbt_hash: 0 } =>
	mov.b32 %r24, 0xff;


	// [18]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 25, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %r25, 0x0;


	// [19]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 26, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %r26, 0x0;


	// [20]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 27, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %r27, 0x0;


	// [21]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 28, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %r28, 0x0;


	// [22]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 29, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %r29, 0x0;


	// [23]: ScheduleVar { op: Literal, deps: [], ty: U32, reg: 30, param_ty: None, data: Literal(0), size: 1, sbt_hash: 0 } =>
	mov.b32 %r30, 0x0;


	// [24]: ScheduleVar { op: TraceRay { payload_count: 5 }, deps: [SVarId(0), SVarId(1), SVarId(5), SVarId(6), SVarId(7), SVarId(8), SVarId(9), SVarId(13), SVarId(14), SVarId(15), SVarId(16), SVarId(17), SVarId(18), SVarId(18), SVarId(18), SVarId(18), SVarId(19), SVarId(20), SVarId(21), SVarId(22), SVarId(23)], ty: Void, reg: 31, param_ty: None, data: None, size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+72];
	.reg.u32 %u31_out_<32>;
	@!%p6 bra l_masked_31;
	.reg.u32 %u31_payload_type, %u31_payload_count;
	mov.u32 %u31_payload_type, 0;
	mov.u32 %u31_payload_count, 5;
call (
%u31_out_0, 
%u31_out_1, 
%u31_out_2, 
%u31_out_3, 
%u31_out_4, 
%u31_out_5, 
%u31_out_6, 
%u31_out_7, 
%u31_out_8, 
%u31_out_9, 
%u31_out_10, 
%u31_out_11, 
%u31_out_12, 
%u31_out_13, 
%u31_out_14, 
%u31_out_15, 
%u31_out_16, 
%u31_out_17, 
%u31_out_18, 
%u31_out_19, 
%u31_out_20, 
%u31_out_21, 
%u31_out_22, 
%u31_out_23, 
%u31_out_24, 
%u31_out_25, 
%u31_out_26, 
%u31_out_27, 
%u31_out_28, 
%u31_out_29, 
%u31_out_30, 
%u31_out_31
), _optix_trace_typed_32, (
%u31_payload_type, 
%rd0, 
%f11, 
%f12, 
%f13, 
%f14, 
%f15, 
%f20, 
%f21, 
%f22, 
%f23, 
%r24, 
%r25, 
%r25, 
%r25, 
%r25, 
%u31_payload_count, 
%r26,
%r27,
%r28,
%r29,
%r30,
%u31_out_5,
%u31_out_6,
%u31_out_7,
%u31_out_8,
%u31_out_9,
%u31_out_10,
%u31_out_11,
%u31_out_12,
%u31_out_13,
%u31_out_14,
%u31_out_15,
%u31_out_16,
%u31_out_17,
%u31_out_18,
%u31_out_19,
%u31_out_20,
%u31_out_21,
%u31_out_22,
%u31_out_23,
%u31_out_24,
%u31_out_25,
%u31_out_26,
%u31_out_27,
%u31_out_28,
%u31_out_29,
%u31_out_30,
%u31_out_31
);

l_masked_31:

	// [25]: ScheduleVar { op: Extract { offset: 3 }, deps: [SVarId(24)], ty: U32, reg: 32, param_ty: None, data: None, size: 2, sbt_hash: 0 } =>
	mov.b32 %r32, %u31_out_3;

	// [26]: ScheduleVar { op: Bitcast, deps: [SVarId(25)], ty: F32, reg: 33, param_ty: Output, data: Buffer(7), size: 2, sbt_hash: 0 } =>
	mov.b32 %f33, %r32;

	// Store:
	ld.const.u64 %rd0, [params + 64]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.f32 [%rd0], %f33; // (Index * ty.size() + params[offset])[Index] <- var

	// [27]: ScheduleVar { op: Data, deps: [], ty: F32, reg: 35, param_ty: None, data: Buffer(4), size: 2, sbt_hash: 0 } =>

	// [28]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 36, param_ty: None, data: None, size: 2, sbt_hash: 0 } =>
	mov.u32 %r36, %r0;


	// [29]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 37, param_ty: None, data: Literal(1), size: 1, sbt_hash: 0 } =>
	mov.pred %p37, 0x1;


	// [30]: ScheduleVar { op: Scatter { op: None }, deps: [SVarId(26), SVarId(27), SVarId(28), SVarId(29)], ty: Void, reg: 38, param_ty: None, data: None, size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+40];
	mad.wide.u32 %rd3, %r36, 4, %rd0;
	st.global.f32 [%rd3], %f33;

	// [31]: ScheduleVar { op: Extract { offset: 0 }, deps: [SVarId(24)], ty: U32, reg: 39, param_ty: None, data: None, size: 2, sbt_hash: 0 } =>
	mov.b32 %r39, %u31_out_0;

	// [32]: ScheduleVar { op: Cast, deps: [SVarId(31)], ty: Bool, reg: 40, param_ty: Output, data: Buffer(5), size: 2, sbt_hash: 0 } =>
	setp.ne.u32 %p40, %r39, 0;

	// Store:
	ld.const.u64 %rd0, [params + 48]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 1, %rd0; // rd0 <- Index * ty.size() + params[offset]
	selp.u16 %w0, 1, 0, %p40;
	st.global.cs.u8 [%rd0], %w0;

	// [33]: ScheduleVar { op: Extract { offset: 4 }, deps: [SVarId(24)], ty: U32, reg: 41, param_ty: None, data: None, size: 2, sbt_hash: 0 } =>
	mov.b32 %r41, %u31_out_4;

	// [34]: ScheduleVar { op: Bitcast, deps: [SVarId(33)], ty: F32, reg: 42, param_ty: Output, data: Buffer(6), size: 2, sbt_hash: 0 } =>
	mov.b32 %f42, %r41;

	// Store:
	ld.const.u64 %rd0, [params + 56]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.f32 [%rd0], %f42; // (Index * ty.size() + params[offset])[Index] <- var

	ret;
}

