---
source: src/backend/optix/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched OptiX Kernel 3129261594958178460 with 2 elements
===============================================
Kernel 3129261594958178460:

.version 8.0
.target sm_86
.address_size 64

.const .align 8 .b8 params[64];
.entry __raygen__cujit(){

	.reg.b8   %b <29>; .reg.b16 %w<29>; .reg.b32 %r<29>;
	.reg.b64  %rd<29>; .reg.f32 %f<29>; .reg.f64 %d<29>;
	.reg.pred %p <29>;

	call (%r0), _optix_get_launch_index_x, ();
	ld.const.u32 %r1, [params + 4];
	add.u32 %r0, %r0, %r1;

body:

	// [0]: ScheduleVar { op: Data, ty: Void, deps: (0, 0), data: AccelIdx(0), sbt_hash: 6797626042257772553 } =>

	// [1]: ScheduleVar { op: Literal, ty: Bool, deps: (0, 0), data: Literal(1), sbt_hash: 0 } =>
	mov.pred %p5, 0x1;


	// [2]: ScheduleVar { op: Data, ty: F32, deps: (0, 0), data: BufferIdx(0), sbt_hash: 0 } =>

	// [3]: ScheduleVar { op: Idx, ty: U32, deps: (0, 0), data: None, sbt_hash: 0 } =>
	mov.u32 %r7, %r0;


	// [4]: ScheduleVar { op: Gather, ty: F32, deps: (0, 3), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	ld.global.nc.f32 %f8, [%rd3];

	// [5]: ScheduleVar { op: Literal, ty: F32, deps: (0, 0), data: Literal(1058642330), sbt_hash: 0 } =>
	mov.b32 %f9, 0x3f19999a;


	// [6]: ScheduleVar { op: Literal, ty: F32, deps: (0, 0), data: Literal(0), sbt_hash: 0 } =>
	mov.b32 %f10, 0x0;


	// [7]: ScheduleVar { op: Data, ty: F32, deps: (0, 0), data: BufferIdx(1), sbt_hash: 0 } =>

	// [8]: ScheduleVar { op: Gather, ty: F32, deps: (3, 6), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+16];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	ld.global.nc.f32 %f12, [%rd3];

	// [9]: ScheduleVar { op: Literal, ty: F32, deps: (0, 0), data: Literal(981668463), sbt_hash: 0 } =>
	mov.b32 %f13, 0x3a83126f;


	// [10]: ScheduleVar { op: Literal, ty: F32, deps: (0, 0), data: Literal(1148846080), sbt_hash: 0 } =>
	mov.b32 %f14, 0x447a0000;


	// [11]: ScheduleVar { op: Literal, ty: U32, deps: (0, 0), data: Literal(255), sbt_hash: 0 } =>
	mov.b32 %r15, 0xff;


	// [12]: ScheduleVar { op: Literal, ty: U32, deps: (0, 0), data: Literal(0), sbt_hash: 0 } =>
	mov.b32 %r16, 0x0;


	// [13]: ScheduleVar { op: TraceRay { payload_count: 5 }, ty: Void, deps: (6, 27), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+56];
	.reg.u32 %u17_out_<32>;
	@!%p5 bra l_masked_17;
	.reg.u32 %u17_payload_type, %u17_payload_count;
	mov.u32 %u17_payload_type, 0;
	mov.u32 %u17_payload_count, 5;
call (
%u17_out_0, 
%u17_out_1, 
%u17_out_2, 
%u17_out_3, 
%u17_out_4, 
%u17_out_5, 
%u17_out_6, 
%u17_out_7, 
%u17_out_8, 
%u17_out_9, 
%u17_out_10, 
%u17_out_11, 
%u17_out_12, 
%u17_out_13, 
%u17_out_14, 
%u17_out_15, 
%u17_out_16, 
%u17_out_17, 
%u17_out_18, 
%u17_out_19, 
%u17_out_20, 
%u17_out_21, 
%u17_out_22, 
%u17_out_23, 
%u17_out_24, 
%u17_out_25, 
%u17_out_26, 
%u17_out_27, 
%u17_out_28, 
%u17_out_29, 
%u17_out_30, 
%u17_out_31
), _optix_trace_typed_32, (
%u17_payload_type, 
%rd0, 
%f8, 
%f9, 
%f10, 
%f10, 
%f10, 
%f12, 
%f13, 
%f14, 
%f10, 
%r15, 
%r16, 
%r16, 
%r16, 
%r16, 
%u17_payload_count, 
%r16,
%r16,
%r16,
%r16,
%r16,
%u17_out_5,
%u17_out_6,
%u17_out_7,
%u17_out_8,
%u17_out_9,
%u17_out_10,
%u17_out_11,
%u17_out_12,
%u17_out_13,
%u17_out_14,
%u17_out_15,
%u17_out_16,
%u17_out_17,
%u17_out_18,
%u17_out_19,
%u17_out_20,
%u17_out_21,
%u17_out_22,
%u17_out_23,
%u17_out_24,
%u17_out_25,
%u17_out_26,
%u17_out_27,
%u17_out_28,
%u17_out_29,
%u17_out_30,
%u17_out_31
);

l_masked_17:

	// [14]: ScheduleVar { op: Extract { offset: 3 }, ty: U32, deps: (27, 28), data: None, sbt_hash: 0 } =>
	mov.b32 %r18, %u17_out_3;

	// [15]: ScheduleVar { op: Bitcast, ty: F32, deps: (28, 29), data: BufferIdx(5), sbt_hash: 0 } =>
	mov.b32 %f19, %r18;

	// [16]: ScheduleVar { op: Data, ty: F32, deps: (0, 0), data: BufferIdx(2), sbt_hash: 0 } =>

	// [17]: ScheduleVar { op: Scatter { op: None }, ty: Void, deps: (29, 33), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+24];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	st.global.f32 [%rd3], %f19;

	// [18]: ScheduleVar { op: Extract { offset: 0 }, ty: U32, deps: (33, 34), data: None, sbt_hash: 0 } =>
	mov.b32 %r22, %u17_out_0;

	// [19]: ScheduleVar { op: Cast, ty: Bool, deps: (34, 35), data: BufferIdx(3), sbt_hash: 0 } =>
	setp.ne.u32 %p23, %r22, 0;

	// [20]: ScheduleVar { op: Scatter { op: None }, ty: Bool, deps: (35, 39), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+32];
	cvt.u64.u32 %rd3, %r7;
	add.u64 %rd3, %rd3, %rd0;
	selp.u16 %w0, 1, 0, %p23;
	st.global.u8 [%rd3], %w0;

	// [21]: ScheduleVar { op: Extract { offset: 4 }, ty: U32, deps: (39, 40), data: None, sbt_hash: 0 } =>
	mov.b32 %r25, %u17_out_4;

	// [22]: ScheduleVar { op: Bitcast, ty: F32, deps: (40, 41), data: BufferIdx(4), sbt_hash: 0 } =>
	mov.b32 %f26, %r25;

	// [23]: ScheduleVar { op: Scatter { op: None }, ty: F32, deps: (41, 45), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+40];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	st.global.f32 [%rd3], %f26;

	// [24]: ScheduleVar { op: Scatter { op: None }, ty: F32, deps: (45, 49), data: None, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+48];
	mad.wide.u32 %rd3, %r7, 4, %rd0;
	st.global.f32 [%rd3], %f19;

	ret;
}

