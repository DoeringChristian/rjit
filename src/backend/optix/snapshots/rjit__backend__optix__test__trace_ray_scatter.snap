---
source: src/backend/optix/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched OptiX Kernel 6944374005085152036 with 2 elements
===============================================
Kernel 6944374005085152036:

.version 8.0
.target sm_86
.address_size 64

.const .align 8 .b8 params[40];
.entry __raygen__cujit(){

	.reg.b8   %b <30>; .reg.b16 %w<30>; .reg.b32 %r<30>;
	.reg.b64  %rd<30>; .reg.f32 %f<30>; .reg.f64 %d<30>;
	.reg.pred %p <30>;

	call (%r0), _optix_get_launch_index_x, ();
	ld.const.u32 %r1, [params + 4];
	add.u32 %r0, %r0, %r1;

body:

	// [0]: ScheduleVar { op: Data, deps: [], ty: Void, param_ty: None, reg: 8, buf: None, tex: None, accel: Some(0), opaque: None, literal: 0, size: 0, sbt_hash: 6797626042257772553 } =>

	// [1]: ScheduleVar { op: Literal, deps: [], ty: Bool, param_ty: None, reg: 9, buf: None, tex: None, accel: None, opaque: None, literal: 1, size: 1, sbt_hash: 0 } =>
	mov.pred %p9, 0x1;


	// [2]: ScheduleVar { op: Data, deps: [], ty: F32, param_ty: Input, reg: 10, buf: Some(0), tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+8];
	mad.wide.u32 %rd0, %r0, 4, %rd0;
	ld.global.cs.f32 %f10, [%rd0];

	// [3]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 11, buf: None, tex: None, accel: None, opaque: None, literal: 1058642330, size: 1, sbt_hash: 0 } =>
	mov.b32 %f11, 0x3f19999a;


	// [4]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 12, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %f12, 0x0;


	// [5]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 13, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %f13, 0x0;


	// [6]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 14, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %f14, 0x0;


	// [7]: ScheduleVar { op: Data, deps: [], ty: F32, param_ty: Input, reg: 15, buf: Some(1), tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+16];
	mad.wide.u32 %rd0, %r0, 4, %rd0;
	ld.global.cs.f32 %f15, [%rd0];

	// [8]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 16, buf: None, tex: None, accel: None, opaque: None, literal: 981668463, size: 1, sbt_hash: 0 } =>
	mov.b32 %f16, 0x3a83126f;


	// [9]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 17, buf: None, tex: None, accel: None, opaque: None, literal: 1148846080, size: 1, sbt_hash: 0 } =>
	mov.b32 %f17, 0x447a0000;


	// [10]: ScheduleVar { op: Literal, deps: [], ty: F32, param_ty: None, reg: 18, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %f18, 0x0;


	// [11]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 19, buf: None, tex: None, accel: None, opaque: None, literal: 255, size: 1, sbt_hash: 0 } =>
	mov.b32 %r19, 0xff;


	// [12]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 20, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %r20, 0x0;


	// [13]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 21, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %r21, 0x0;


	// [14]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 22, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %r22, 0x0;


	// [15]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 23, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %r23, 0x0;


	// [16]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 24, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %r24, 0x0;


	// [17]: ScheduleVar { op: Literal, deps: [], ty: U32, param_ty: None, reg: 25, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 1, sbt_hash: 0 } =>
	mov.b32 %r25, 0x0;


	// [18]: ScheduleVar { op: TraceRay { payload_count: 5 }, deps: [SVarId(0), SVarId(1), SVarId(2), SVarId(3), SVarId(4), SVarId(5), SVarId(6), SVarId(7), SVarId(8), SVarId(9), SVarId(10), SVarId(11), SVarId(12), SVarId(12), SVarId(12), SVarId(12), SVarId(13), SVarId(14), SVarId(15), SVarId(16), SVarId(17)], ty: Void, param_ty: None, reg: 7, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	ld.const.u64 %rd0, [params+32];
	.reg.u32 %u7_out_<32>;
	.reg.u32 %u7_payload_type, %u7_payload_count;
	mov.u32 %u7_payload_type, 0;
	mov.u32 %u7_payload_count, 5;
call (
%u7_out_0, 
%u7_out_1, 
%u7_out_2, 
%u7_out_3, 
%u7_out_4, 
%u7_out_5, 
%u7_out_6, 
%u7_out_7, 
%u7_out_8, 
%u7_out_9, 
%u7_out_10, 
%u7_out_11, 
%u7_out_12, 
%u7_out_13, 
%u7_out_14, 
%u7_out_15, 
%u7_out_16, 
%u7_out_17, 
%u7_out_18, 
%u7_out_19, 
%u7_out_20, 
%u7_out_21, 
%u7_out_22, 
%u7_out_23, 
%u7_out_24, 
%u7_out_25, 
%u7_out_26, 
%u7_out_27, 
%u7_out_28, 
%u7_out_29, 
%u7_out_30, 
%u7_out_31
), _optix_trace_typed_32, (
%u7_payload_type, 
%rd0, 
%f10, 
%f11, 
%f12, 
%f13, 
%f14, 
%f15, 
%f16, 
%f17, 
%f18, 
%r19, 
%r20, 
%r20, 
%r20, 
%r20, 
%u7_payload_count, 
%r21,
%r22,
%r23,
%r24,
%r25,
%u7_out_5,
%u7_out_6,
%u7_out_7,
%u7_out_8,
%u7_out_9,
%u7_out_10,
%u7_out_11,
%u7_out_12,
%u7_out_13,
%u7_out_14,
%u7_out_15,
%u7_out_16,
%u7_out_17,
%u7_out_18,
%u7_out_19,
%u7_out_20,
%u7_out_21,
%u7_out_22,
%u7_out_23,
%u7_out_24,
%u7_out_25,
%u7_out_26,
%u7_out_27,
%u7_out_28,
%u7_out_29,
%u7_out_30,
%u7_out_31
);

	// [19]: ScheduleVar { op: Extract { offset: 3 }, deps: [SVarId(18)], ty: U32, param_ty: None, reg: 6, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	mov.b32 %r6, %u7_out_3;

	// [20]: ScheduleVar { op: Bitcast, deps: [SVarId(19)], ty: F32, param_ty: None, reg: 5, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	mov.b32 %f5, %r6;

	// [21]: ScheduleVar { op: Data, deps: [], ty: F32, param_ty: None, reg: 26, buf: Some(2), tex: None, accel: None, opaque: None, literal: 0, size: 0, sbt_hash: 0 } =>

	// [22]: ScheduleVar { op: Idx, deps: [], ty: U32, param_ty: None, reg: 27, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	mov.u32 %r27, %r0;


	// [23]: ScheduleVar { op: Extract { offset: 0 }, deps: [SVarId(18)], ty: U32, param_ty: None, reg: 29, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	mov.b32 %r29, %u7_out_0;

	// [24]: ScheduleVar { op: Cast, deps: [SVarId(23)], ty: Bool, param_ty: None, reg: 28, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	setp.ne.u32 %p28, %r29, 0;

	// [25]: ScheduleVar { op: Scatter { op: None }, deps: [SVarId(20), SVarId(21), SVarId(22), SVarId(24)], ty: Void, param_ty: None, reg: 4, buf: None, tex: None, accel: None, opaque: None, literal: 0, size: 2, sbt_hash: 0 } =>
	@!%p28 bra l_4_done;

	ld.const.u64 %rd0, [params+24];
	mad.wide.u32 %rd3, %r27, 4, %rd0;
	st.global.f32 [%rd3], %f5;
	l_4_done:

	ret;
}

