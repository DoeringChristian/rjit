---
source: src/backend/cuda/test.rs
expression: ir.kernel_history()
---
Kernel History:
Launched CUDA Kernel 4241313732460309280 with 3 elements
===============================================
Kernel 4241313732460309280:

.version 8.0
.target sm_86
.address_size 64

.entry cujit(
	.param .align 8 .b8 params[48]) {

	.reg.b8   %b <13>; .reg.b16 %w<13>; .reg.b32 %r<13>;
	.reg.b64  %rd<13>; .reg.f32 %f<13>; .reg.f64 %d<13>;
	.reg.pred %p <13>;

	mov.u32 %r0, %ctaid.x;
	mov.u32 %r1, %ntid.x;
	mov.u32 %r2, %tid.x;
	mad.lo.u32 %r0, %r0, %r1, %r2; // r0 <- Index

	// Index Conditional (jump to done if Index >= Size).
	ld.param.u32 %r2, [params]; // r2 <- params[0] (Size)
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r0 >= r2
	@%p0 bra done; // if p0 => done
	
	mov.u32 %r3, %nctaid.x; // r3 <- nctaid.x
	mul.lo.u32 %r1, %r3, %r1; // r1 <- r3 * r1
	
body: // sm_86

	// [0]: ScheduleVar { op: Data, deps: [], ty: F32, reg: 5, param_ty: None, data: Buffer(0), size: 5, sbt_hash: 0 } =>

	// [1]: ScheduleVar { op: Data, deps: [], ty: U32, reg: 7, param_ty: None, data: Buffer(1), size: 3, sbt_hash: 0 } =>

	// [2]: ScheduleVar { op: Idx, deps: [], ty: U32, reg: 8, param_ty: None, data: None, size: 1, sbt_hash: 0 } =>
	mov.u32 %r8, %r0;


	// [3]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 9, param_ty: None, data: Literal(1), size: 1, sbt_hash: 0 } =>
	mov.pred %p9, 0x1;


	// [4]: ScheduleVar { op: Gather, deps: [SVarId(1), SVarId(2), SVarId(3)], ty: U32, reg: 10, param_ty: None, data: Buffer(2), size: 3, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+16];
	mad.wide.u32 %rd3, %r8, 4, %rd0;
	ld.global.nc.u32 %r10, [%rd3];

	// [5]: ScheduleVar { op: Literal, deps: [], ty: Bool, reg: 11, param_ty: None, data: Literal(1), size: 1, sbt_hash: 0 } =>
	mov.pred %p11, 0x1;


	// [6]: ScheduleVar { op: Gather, deps: [SVarId(0), SVarId(4), SVarId(5)], ty: F32, reg: 12, param_ty: Output, data: Buffer(3), size: 3, sbt_hash: 0 } =>
	ld.param.u64 %rd0, [params+8];
	mad.wide.u32 %rd3, %r10, 4, %rd0;
	ld.global.nc.f32 %f12, [%rd3];

	// Store:
	ld.param.u64 %rd0, [params + 32]; // rd0 <- params[offset]
	mad.wide.u32 %rd0, %r0, 4, %rd0; // rd0 <- Index * ty.size() + params[offset]
	st.global.cs.f32 [%rd0], %f12; // (Index * ty.size() + params[offset])[Index] <- var

	//End of Kernel:

	add.u32 %r0, %r0, %r1; // r0 <- r0 + r1
	setp.ge.u32 %p0, %r0, %r2; // p0 <- r1 >= r2
	@!%p0 bra body; // if p0 => body


done:

	ret;
}

